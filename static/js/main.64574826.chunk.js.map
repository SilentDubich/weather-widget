{"version":3,"sources":["Components/CityCardInfo/stylesCityCard.module.css","img/WeatherCard/tag.svg","img/Backgrounds/night.svg","img/WeatherCard/sunrise.svg","img/WeatherCard/sunset.svg","img/WeatherCard/wind.svg","Components/Search/stylesCitiesList.module.css","img/WeatherCard/sand-clock.svg","img/WeatherCard/pressure.svg","img/WeatherCard/humidity.svg","img/Backgrounds/day.svg","Components/Common/Preloader/Spinner-1.4s-3a356a.svg","Components/Common/Preloader/preloaderStyles.module.css","common.module.css","Components/Search/search.tsx","Components/Search/citiesList.tsx","Redux/commonMehods.ts","Components/Common/cardItem.tsx","Components/CityCardInfo/cityCard.tsx","Redux/api.ts","Redux/Reducers/citiesReducer.ts","Components/Common/Preloader/preloader.tsx","App.tsx","serviceWorker.ts","Redux/store.ts","index.tsx"],"names":["module","exports","Search","props","ref","React","createRef","className","SCities","input__margin","input__decor","onChange","current","updText","value","text","button__position","onClick","addCity","setChose","src","Tag","CitiesList","cities","sort","prev","next","name","map","el","i","key","id","items_upper__decor","undefined","SCommon","container_items__displayFlex","items_font__margin","cursor","data","setCity","setChoose","items_font__decor","sys","country","items_temp__margin","Math","ceil","main","temp","deleteButton__decor","deleteCity","container__background","getCities","strCities","localStorage","getItem","allCities","JSON","parse","getTime","time","date","Date","hours","getHours","minutes","getMinutes","getSeconds","substr","updLocalStorage","method","filter","push","setItem","stringify","CardItem","container","containerParam","photo","alt","paramInfo","param","paramName","CityCard","dataNow","sunrise","sunset","differ","Object","keys","length","unix","dayWeek","getDay","day","getDate","month","getMonth","year","getFullYear","getFullData","dt","sunrArr","split","sunsArr","sunriseTimeMin","floor","getDiffTime","SCity","container__marginAuto","container_items__little","container_items__marginUpBottom","container_paramInfo__decor","container_paramName__decor","background","Night","Day","container_background__width","container__positionBottom","container_header__margins","container_header__fs","container_header__opacity","container_headerCity__blueBack","container_tagPhoto__width","container_mainTemp__boldFont","weather","container_celsius__upText","container_minMaxTemp__opacity","temp_max","container_minMaxArrow__alighUp","container_minMaxArrow__fs","temp_min","container_minMaxArrow__alighDown","humidity","Humidity","pressure","Pressure","wind","speed","Wind","Sunrise","Sunset","SandClock","container_notChose__width","container_notChose__font","API_KEY","instance","axios","create","baseURL","api","city","get","then","response","ids","citiesActions","type","uploadCities","setError","setInit","uploadCitiesThunk","dispatch","a","maxPortion","chunks","list","request","slice","join","forEach","initialState","citiesList","currentCity","errors","isInit","isFetch","Preloader","SPreloader","preloader__position","Preload","AppWrapper","connect","state","citiesReducer","err","resultCode","useState","chooseCity","setChooseCity","useEffect","choose","Boolean","window","location","hostname","match","allReducers","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.64574826.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container_img__little\":\"stylesCityCard_container_img__little__1XdmB\",\"container_items__little\":\"stylesCityCard_container_items__little__30xaO\",\"container_background__width\":\"stylesCityCard_container_background__width__1C8Wp\",\"container__marginAuto\":\"stylesCityCard_container__marginAuto__1hHSr\",\"container__positionBottom\":\"stylesCityCard_container__positionBottom__Ro9yk\",\"container__background\":\"stylesCityCard_container__background__2tfaP\",\"container_paramInfo__decor\":\"stylesCityCard_container_paramInfo__decor__1T9gA\",\"container_paramName__decor\":\"stylesCityCard_container_paramName__decor__5OM-3\",\"container_mainTemp__boldFont\":\"stylesCityCard_container_mainTemp__boldFont__2N3YV\",\"container_celsius__upText\":\"stylesCityCard_container_celsius__upText__1q1kk\",\"container_minMaxTemp__opacity\":\"stylesCityCard_container_minMaxTemp__opacity__1_pZZ\",\"container_minMaxArrow__fs\":\"stylesCityCard_container_minMaxArrow__fs__2RFMn\",\"container_minMaxArrow__alighUp\":\"stylesCityCard_container_minMaxArrow__alighUp__3NYDU\",\"container_minMaxArrow__alighDown\":\"stylesCityCard_container_minMaxArrow__alighDown__2olVk\",\"container_items__marginUpBottom\":\"stylesCityCard_container_items__marginUpBottom__33Z1e\",\"container_header__margins\":\"stylesCityCard_container_header__margins__Y_ivR\",\"container_header__fs\":\"stylesCityCard_container_header__fs__2r2Ds\",\"container_header__opacity\":\"stylesCityCard_container_header__opacity__2odSx\",\"container_headerCity__blueBack\":\"stylesCityCard_container_headerCity__blueBack__1rn7p\",\"container_tagPhoto__width\":\"stylesCityCard_container_tagPhoto__width__24ww-\",\"container_notChose__font\":\"stylesCityCard_container_notChose__font__330Tb\"};","module.exports = __webpack_public_path__ + \"static/media/tag.8aa75e6a.svg\";","module.exports = __webpack_public_path__ + \"static/media/night.66e90e8d.svg\";","module.exports = __webpack_public_path__ + \"static/media/sunrise.35e1634c.svg\";","module.exports = __webpack_public_path__ + \"static/media/sunset.6b4fc41a.svg\";","module.exports = __webpack_public_path__ + \"static/media/wind.96892bc1.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container__background\":\"stylesCitiesList_container__background__2Ulwz\",\"cursor\":\"stylesCitiesList_cursor__12zOB\",\"items_font__decor\":\"stylesCitiesList_items_font__decor__3ISxM\",\"items_font__margin\":\"stylesCitiesList_items_font__margin__3zyZ4\",\"items_temp__margin\":\"stylesCitiesList_items_temp__margin__1by12\",\"items_upper__decor\":\"stylesCitiesList_items_upper__decor__3KqOZ\",\"deleteButton__decor\":\"stylesCitiesList_deleteButton__decor__YpaPA\",\"input__margin\":\"stylesCitiesList_input__margin__2UYVO\",\"input__decor\":\"stylesCitiesList_input__decor__2FplI\",\"button__position\":\"stylesCitiesList_button__position__Kskot\"};","module.exports = __webpack_public_path__ + \"static/media/sand-clock.84e55b96.svg\";","module.exports = __webpack_public_path__ + \"static/media/pressure.e8bba4f9.svg\";","module.exports = __webpack_public_path__ + \"static/media/humidity.98b6e7bc.svg\";","module.exports = __webpack_public_path__ + \"static/media/day.34951eba.svg\";","module.exports = __webpack_public_path__ + \"static/media/Spinner-1.4s-3a356a.4b7d2a00.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader__position\":\"preloaderStyles_preloader__position__2CISw\",\"preloader__backgroundOpacity\":\"preloaderStyles_preloader__backgroundOpacity__2alRK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container_items__displayFlex\":\"common_container_items__displayFlex__jvJLG\",\"container_items__displayCenter\":\"common_container_items__displayCenter__hD1l_\"};","import React, {FC} from \"react\";\r\nimport SCities from \"./stylesCitiesList.module.css\";\r\nimport Tag from \"../../img/WeatherCard/tag.svg\"\r\n\r\ntype PropsType = {\r\n    text: string\r\n    setChose: (value: boolean | ((prevVar: boolean) => boolean)) => void\r\n    updText: (text: string) => void\r\n    addCity: (city: string) => void\r\n}\r\n\r\nexport const Search: FC<PropsType> = (props) => {\r\n    let ref = React.createRef<HTMLInputElement>()\r\n    const updateCurrentText = () => {\r\n        if (ref.current) {\r\n            props.updText(ref.current.value)\r\n        }\r\n    }\r\n    const setCity = () => {\r\n        props.addCity(props.text)\r\n        props.setChose(false)\r\n    }\r\n    return(\r\n        <div className={SCities.input__margin}>\r\n            <div>\r\n                <input className={SCities.input__decor} onChange={updateCurrentText} ref={ref} value={props.text}/>\r\n                <span className={SCities.button__position} onClick={setCity}><img src={Tag}/></span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {FC} from \"react\";\r\nimport {CityType} from \"../../Redux/Reducers/citiesReducer\";\r\nimport SCities from \"./stylesCitiesList.module.css\"\r\nimport SCommon from \"../../common.module.css\";\r\n\r\ntype PropsType = {\r\n    choose: boolean\r\n    cities: Array<CityType>\r\n    setChoose: (value: boolean | ((prevVar: boolean) => boolean)) => void\r\n    setCity: (data: CityType) => void\r\n    deleteCity: (id: number) => void\r\n}\r\n\r\n\r\nexport const CitiesList: FC<PropsType> = (props) => {\r\n    const setCity = (data: CityType) => {\r\n        props.setCity(data)\r\n        props.setChoose(false)\r\n    }\r\n// @ts-ignore\r\n    const cities = props.cities.sort((prev: CityType, next: CityType) => {\r\n        // сортирует города по алфавиту\r\n        if (prev.name < next.name) return -1\r\n        if (prev.name < next.name) return 1\r\n    }).map((el: any, i: number) =>\r\n        <div key={el.id}>\r\n            <div className={SCities.items_upper__decor}>\r\n                {props.cities[i - 1] === undefined &&\r\n                <b>{props.cities[i].name[0]}</b> || props.cities[i - 1].name[0] !== props.cities[i].name[0] &&\r\n                <b>{props.cities[i].name[0]}</b>}\r\n            </div>\r\n            <div className={`${SCommon.container_items__displayFlex}`}>\r\n                <div className={`${SCities.items_font__margin} ${SCities.cursor}`} key={el.id} onClick={() => setCity(el)}>\r\n                    <span className={`${SCities.items_font__decor}`}>{el.name},</span>\r\n                    <span className={`${SCities.items_font__decor}`}>{el.sys.country}</span>\r\n                </div>\r\n                <div>\r\n                    <span className={`${SCities.items_font__decor} ${SCities.items_temp__margin}`}>{Math.ceil(el.main.temp)}&#8451;</span>\r\n                </div>\r\n                <div>\r\n                    <button className={SCities.deleteButton__decor} onClick={() => props.deleteCity(el.id)}><span>&#10005;</span></button>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n    return (\r\n        <div className={SCities.container__background}>\r\n            {cities}\r\n        </div>\r\n    )\r\n}\r\n","import {CityType} from \"./Reducers/citiesReducer\";\r\n// достает наши города из локал стораджа\r\nexport const getCities = () => {\r\n    let strCities: string | null = localStorage.cities && localStorage.getItem('cities')\r\n    let allCities: Array<number> = []\r\n    if (strCities) allCities = JSON.parse(strCities)\r\n    return allCities\r\n}\r\n// переводит дату из юникс формата в формат чч:мм\r\nexport const getTime = (time: number) => {\r\n    let date = new Date(time * 1000);\r\n// Hours part from the timestamp\r\n    let hours = date.getHours();\r\n// Minutes part from the timestamp\r\n    let minutes = \"0\" + date.getMinutes();\r\n// Seconds part from the timestamp\r\n    let seconds = \"0\" + date.getSeconds();\r\n\r\n// Will display time in 10:30:23 format\r\n    return `${hours}:${minutes.substr(-2)}`\r\n}\r\n// обновляет локал сторадж в зависимости от метода\r\nexport const updLocalStorage = (method: string, id: number, data?: CityType) => {\r\n    let allCities: Array<number> = getCities()\r\n    if (method === 'add') {\r\n        if (data) {\r\n            allCities = allCities.filter(el => el !== id)\r\n            allCities.push(id)\r\n        }\r\n    } else {\r\n        allCities = allCities.filter(el => el !== id)\r\n    }\r\n    // method === 'add' ? allCities = allCities.filter( el => el.id !== id).push(data) : allCities.filter( el => el.id !== id)\r\n    localStorage.setItem('cities', JSON.stringify(allCities))\r\n}\r\n// вычисляет день светового дня\r\nexport const getDiffTime = (sunrise: string, sunset: string) => {\r\n    let sunrArr = sunrise.split(':')\r\n    let sunsArr = sunset.split(':')\r\n    let sunriseTimeMin = (+sunrArr[0] * 60) + (+sunrArr[1])\r\n    let sunsetTimeMin = (+sunsArr[0] * 60) + (+sunsArr[1])\r\n    let differ = sunsetTimeMin - sunriseTimeMin\r\n    let hours = Math.floor(differ / 60)\r\n    let minutes = Math.floor(differ - hours * 60)\r\n    return `${hours}:${minutes}`\r\n}\r\n// переводит юникс дату в обычный формат\r\nexport const getFullData = (unix: number) => {\r\n    let days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\r\n    let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\r\n    let data = new Date(unix * 1000)\r\n    let dayWeek = data.getDay()\r\n    let day = data.getDate()\r\n    let month = data.getMonth()\r\n    let year = data.getFullYear()\r\n    let time = getTime(unix)\r\n    return `${days[dayWeek]}, ${day} ${months[month]} ${year} | ${time}`\r\n}\r\n","import React, {FC} from \"react\";\r\nimport SCity from \"../CityCardInfo/stylesCityCard.module.css\";\r\nimport Humidity from \"../../img/WeatherCard/humidity.svg\";\r\n\r\ntype PropsType = {\r\n    container: string\r\n    containerParam: string\r\n    paramInfo: string\r\n    paramName: string\r\n    param: string\r\n    name: string\r\n    photo: string\r\n}\r\n\r\nexport const CardItem: FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={props.container}>\r\n            <div className={props.containerParam}><img src={props.photo} alt=\"\"/></div>\r\n            <div className={props.containerParam}><span className={props.paramInfo}>{props.param}</span></div>\r\n            <div className={props.containerParam}><span className={props.paramName}>{props.name}</span></div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {FC} from \"react\";\r\nimport {CityType} from \"../../Redux/Reducers/citiesReducer\";\r\nimport {getDiffTime, getFullData, getTime} from \"../../Redux/commonMehods\";\r\nimport SCity from \"./stylesCityCard.module.css\";\r\nimport SCommon from \"../../common.module.css\";\r\nimport Sunrise from \"../../img/WeatherCard/sunrise.svg\"\r\nimport Sunset from \"../../img/WeatherCard/sunset.svg\";\r\nimport Wind from \"../../img/WeatherCard/wind.svg\";\r\nimport SandClock from \"../../img/WeatherCard/sand-clock.svg\";\r\nimport Pressure from \"../../img/WeatherCard/pressure.svg\";\r\nimport Humidity from \"../../img/WeatherCard/humidity.svg\";\r\nimport Tag from \"../../img/WeatherCard/tag.svg\";\r\nimport Day from \"../../img/Backgrounds/day.svg\";\r\nimport Night from \"../../img/Backgrounds/night.svg\";\r\nimport {CardItem} from \"../Common/cardItem\";\r\n\r\n\r\ntype PropsType = {\r\n    choose: boolean\r\n    current: CityType\r\n    setChoose: (value: boolean | ((prevVar: boolean) => boolean)) => void;\r\n}\r\n\r\n\r\nexport const CityCard: FC<PropsType> = (props) => {\r\n    let dataNow: any = ''\r\n    let sunrise: string = ''\r\n    let sunset: string = ''\r\n    let differ: string = ''\r\n    if (Object.keys(props.current).length > 0) {\r\n        dataNow = getFullData(props.current.dt)\r\n        sunrise = getTime(props.current.sys.sunrise)\r\n        sunset = getTime(props.current.sys.sunset)\r\n        differ = getDiffTime(sunrise, sunset)\r\n    }\r\n    const container = `${SCity.container__marginAuto} ${SCity.container_items__little} ${SCity.container_items__marginUpBottom}`\r\n    const containerParam = `${SCity.container__marginAuto}`\r\n    const paramInfo = `${SCity.container_paramInfo__decor}`\r\n    const paramName = `${SCity.container_paramName__decor}`\r\n    const background = +getTime(props.current.dt).split(':')[0]\r\n    const photo = background > 18 && Night || background < 4 && Night || Day\r\n    return (\r\n        <div>\r\n            {Object.keys(props.current).length > 0 &&\r\n                <div>\r\n                    <div>\r\n                        <img className={SCity.container_background__width} src={photo} alt=\"\"/>\r\n                    </div>\r\n                    <div className={`${SCity.container__positionBottom} ${SCity.container__background}`}>\r\n                        <div className={`${SCommon.container_items__displayFlex}`}>\r\n                            <div className={`${SCity.container_header__margins} ${SCity.container_header__fs} ${SCity.container_header__opacity}`}>\r\n                                {dataNow}\r\n                            </div>\r\n                            <div className={`${SCity.container_header__margins} ${SCity.container_header__fs} ${SCity.container_headerCity__blueBack}`}>\r\n                                <span>{props.current.name}, {props.current.sys.country}</span>\r\n                                <img onClick={() => props.setChoose(true)} className={SCity.container_tagPhoto__width} src={Tag} alt=\"\"/>\r\n                            </div>\r\n                        </div>\r\n                        <div className={SCommon.container_items__displayFlex}>\r\n                            <div className={container}><span className={SCity.container_mainTemp__boldFont}>{props.current.weather[0].main}</span></div>\r\n                            <div className={container}>\r\n                                <span className={SCity.container_mainTemp__boldFont}>{props.current.main.temp}</span>\r\n                                <span className={SCity.container_celsius__upText}>&#8451;</span>\r\n                            </div>\r\n                            <div className={container}>\r\n                                <div>\r\n                            <span\r\n                                className={SCity.container_minMaxTemp__opacity}\r\n                            >{props.current.main.temp_max}&#8451;\r\n                            </span>\r\n                                    <span\r\n                                        className={`${SCity.container_minMaxTemp__opacity} ${SCity.container_minMaxArrow__alighUp} ${SCity.container_minMaxArrow__fs}`}\r\n                                    >&#8593;\r\n                            </span>\r\n                                </div>\r\n                                <div>\r\n                            <span className={SCity.container_minMaxTemp__opacity}>\r\n                            {props.current.main.temp_min}&#8451;\r\n                            </span>\r\n                                    <span\r\n                                        className={`${SCity.container_minMaxTemp__opacity} ${SCity.container_minMaxArrow__alighDown} ${SCity.container_minMaxArrow__fs}`}\r\n                                    >&#8595;\r\n                            </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className={SCommon.container_items__displayFlex}>\r\n                            <CardItem container={container} containerParam={containerParam}\r\n                                      param={`${props.current.main.humidity}%`}\r\n                                      paramInfo={paramInfo} paramName={paramName} name={'Humidity'} photo={Humidity}\r\n                            />\r\n                            <CardItem container={container} containerParam={containerParam}\r\n                                      param={`${props.current.main.pressure}mBar`}\r\n                                      paramInfo={paramInfo} paramName={paramName} name={'Pressure'} photo={Pressure}\r\n                            />\r\n                            <CardItem container={container} containerParam={containerParam}\r\n                                      param={`${props.current.wind.speed}km/h`}\r\n                                      paramInfo={paramInfo} paramName={paramName} name={'Wind'} photo={Wind}\r\n                            />\r\n                        </div>\r\n                        <div className={SCommon.container_items__displayFlex}>\r\n                            <CardItem container={container} containerParam={containerParam} param={sunrise}\r\n                                      paramInfo={paramInfo} paramName={paramName} name={'Sunrise'} photo={Sunrise}\r\n                            />\r\n                            <CardItem container={container} containerParam={containerParam} param={sunset}\r\n                                      paramInfo={paramInfo} paramName={paramName} name={'Sunset'} photo={Sunset}\r\n                            />\r\n                            <CardItem container={container} containerParam={containerParam} param={differ}\r\n                                      paramInfo={paramInfo} paramName={paramName} name={'Day time'} photo={SandClock}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n            {Object.keys(props.current).length === 0 &&\r\n            <div className={`${SCity.container__background}`}>\r\n                <div onClick={() => props.setChoose(true)} className={`${SCity.container_notChose__width} ${SCity.container_notChose__font}`}>\r\n                    <span>City not chosen!</span>\r\n                    <span>Chose!</span>\r\n                </div>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n","import axios from \"axios\"\r\n\r\nconst API_KEY = '69ce2885297a6948d2f90220e8476c69'\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.openweathermap.org/data/2.5/'\r\n})\r\n\r\nexport const api = {\r\n    getCityByName: (city: string) => {\r\n        return instance.get(`weather?q=${city}&appid=${API_KEY}&units=metric`).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    getCitiesById: (ids: string) => {\r\n        return instance.get(`group?id=${ids}&appid=${API_KEY}&units=metric`).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    getSeveralDayForecast: (id: number, count: number) => {\r\n        return instance.get(`forecast/daily?id=${id.toString()}&cnt=${count.toString()}&appid=${API_KEY}`).then(response => {\r\n            return response.data\r\n        })\r\n    }\r\n}\r\n","import {AppStateType, InferActionsTypes} from \"../store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {api} from \"../api\";\r\nimport {getCities, updLocalStorage} from \"../commonMehods\";\r\n\r\n\r\ntype ActionCitiesTypes = InferActionsTypes<typeof citiesActions>\r\nexport type ThunkCitiesType = ThunkAction<Promise<void>, AppStateType, unknown, ActionCitiesTypes>\r\n\r\nexport const citiesActions = {\r\n    addCity: (data: CityType) => ({type: 'citiesReducer/addCity', data} as const),\r\n    deleteCity: (id: number) => ({type: 'citiesReducer/deleteCity', id} as const),\r\n    setCity: (data: CityType) => ({type: 'citiesReducer/setCity', data} as const),\r\n    uploadCities: (cities: Array<CityType>) => ({type: 'citiesReducer/uploadCities', cities} as const),\r\n    updText: (text: string) => ({type: 'citiesReducer/updText', text} as const),\r\n    setError: (data: ErrorType) => ({type: 'citiesReducer/setError', data} as const),\r\n    setInit: () => ({type: 'citiesReducer/setInit'} as const)\r\n}\r\n\r\nexport type ErrorType = {\r\n    resultCode?: number\r\n    errors?: Array<string>\r\n}\r\n\r\n// добавление города в стэйт и лока сторадж, если города нет, то выбрасывается ошибка\r\nexport const addCityThunk = (city: string): ThunkCitiesType => {\r\n    return async (dispatch) => {\r\n        try {\r\n            let data = await api.getCityByName(city)\r\n            updLocalStorage('add', data.id, data)\r\n            dispatch(citiesActions.addCity(data))\r\n            dispatch(citiesActions.setError({}))\r\n            dispatch(citiesActions.setCity(data))\r\n        } catch (e) {\r\n            dispatch(citiesActions.setError({resultCode: 1, errors: ['Такого города нет']}))\r\n        }\r\n    }\r\n}\r\nexport const deleteCityThunk = (id: number): ThunkCitiesType => {\r\n    return async (dispatch) => {\r\n        updLocalStorage('delete', id)\r\n        dispatch(citiesActions.deleteCity(id))\r\n    }\r\n}\r\n// Данная санка загружает из локал стораджа города и загружает в стэйт\r\nexport const uploadCitiesThunk = (): ThunkCitiesType => {\r\n    return async (dispatch) => {\r\n        const maxPortion = 20\r\n        let allCities = getCities()\r\n        // количество запросов на сервер\r\n        let chunks = Math.ceil(allCities.length / maxPortion)\r\n        let list: Array<CityType> = []\r\n        for (let i = 0; i < chunks; i++) {\r\n            let request = allCities.slice(i * maxPortion, i * maxPortion + maxPortion)\r\n            let data = await api.getCitiesById(request.join(','))\r\n            data.list.forEach((el: CityType) => list.push(el))\r\n        }\r\n        dispatch(citiesActions.uploadCities(list))\r\n        dispatch(citiesActions.setInit())\r\n    }\r\n}\r\n// Метод не вошел тк данный мне апикей не подходит для запросов прогнозов на несколько дней\r\n// export const setCurrentCity = (id: number, count: number): ThunkCitiesType => {\r\n//     return async (dispatch) => {\r\n//         const data = api.getSeveralDayForecast(id, count)\r\n//         // dispatch(citiesActions.setCity(data))\r\n//     }\r\n// }\r\n\r\nexport type CityType = {\r\n    coord: {\r\n        \"lon\": number\r\n        \"lat\": number\r\n    },\r\n    weather: [\r\n        {\r\n            \"id\": number\r\n            \"main\": string\r\n            \"description\": string\r\n            \"icon\": string\r\n        }\r\n    ],\r\n    \"base\": string\r\n    \"main\": {\r\n        \"temp\": number\r\n        \"pressure\": number\r\n        \"humidity\": number\r\n        \"temp_min\": number\r\n        \"temp_max\": number\r\n    },\r\n    \"visibility\": number\r\n    \"wind\": {\r\n        \"speed\": number\r\n        \"deg\": number\r\n    },\r\n    \"clouds\": {\r\n        \"all\": number\r\n    },\r\n    \"dt\": number\r\n    \"sys\": {\r\n        \"type\": number\r\n        \"id\": number\r\n        \"message\": number\r\n        \"country\": string\r\n        \"sunrise\": number\r\n        \"sunset\": number\r\n    },\r\n    \"id\": number\r\n    \"name\": string\r\n    \"cod\": number\r\n}\r\n\r\nlet initialState = {\r\n    citiesList: [] as Array<CityType>,\r\n    currentCity: {} as CityType,\r\n    text: '',\r\n    errors: {} as ErrorType,\r\n    isInit: false,\r\n    isFetch: false\r\n}\r\n\r\ntype initialStateType = typeof initialState\r\n\r\nexport const citiesInstructions = (state = initialState, action: ActionCitiesTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case \"citiesReducer/addCity\":\r\n            return {...state, citiesList: [...state.citiesList, action.data], text: ''}\r\n        case \"citiesReducer/deleteCity\":\r\n            return {...state, citiesList: state.citiesList.filter(el => el.id !== action.id)}\r\n        case \"citiesReducer/setCity\":\r\n            return {...state, currentCity: action.data}\r\n        case \"citiesReducer/uploadCities\":\r\n            return {...state, citiesList: action.cities}\r\n        case \"citiesReducer/updText\":\r\n            return {...state, text: action.text}\r\n        case \"citiesReducer/setError\":\r\n            return {...state, errors: action.data}\r\n        case \"citiesReducer/setInit\":\r\n            return {...state, isInit: true}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import React, {FC} from \"react\";\r\nimport Preload from \"./Spinner-1.4s-3a356a.svg\"\r\nimport SPreloader from \"./preloaderStyles.module.css\"\r\n\r\n\r\n\r\nexport const Preloader: FC<any> = (props) => {\r\n    return (\r\n        <div>\r\n            <img className={`${SPreloader.preloader__position}`} src={Preload}/>\r\n        </div>\r\n    )\r\n}\r\n","import React, {FC, useEffect, useState} from 'react';\nimport './App.css';\nimport {Search} from \"./Components/Search/search\";\nimport {CitiesList} from \"./Components/Search/citiesList\";\nimport {CityCard} from \"./Components/CityCardInfo/cityCard\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"./Redux/store\";\nimport {\n    addCityThunk,\n    citiesActions,\n    CityType,\n    deleteCityThunk,\n    ErrorType,\n    uploadCitiesThunk\n} from \"./Redux/Reducers/citiesReducer\";\nimport {Preloader} from \"./Components/Common/Preloader/preloader\";\n\ntype PropsType = {\n    cities: Array<CityType>\n    currentCity: CityType\n    updText: (text: string) => void\n    err: ErrorType\n    text: string\n    isInit: boolean\n    getCities: () => void\n    addCity: (city: string) => void\n    uploadCities: () => void\n    setCity: (data: CityType) => void\n    deleteCity: (id: number) => void\n}\n\nexport const App: FC<PropsType> = (props) => {\n    const [chooseCity, setChooseCity] = useState(false)\n    useEffect(() => {\n        props.uploadCities()\n    }, [])\n    if (!props.isInit) return <Preloader/>\n    return (\n        <div>\n            {chooseCity ?\n                <div>\n                    <Search setChose={setChooseCity} addCity={props.addCity} text={props.text} updText={props.updText}/>\n                    {props.err.errors && props.err.errors[0]}\n                    <CitiesList deleteCity={props.deleteCity} setCity={props.setCity} cities={props.cities} choose={chooseCity} setChoose={setChooseCity}/>\n                </div>\n                :\n                <div>\n                    <CityCard current={props.currentCity} choose={chooseCity} setChoose={setChooseCity}/>\n                </div>\n            }\n        </div>\n    );\n}\n\nlet mapStateToProps = (state: AppStateType) => {\n    return {\n        cities: state.citiesReducer.citiesList,\n        currentCity: state.citiesReducer.currentCity,\n        text: state.citiesReducer.text,\n        err: state.citiesReducer.errors,\n        isInit: state.citiesReducer.isInit\n    }\n}\n\nexport const AppWrapper = connect(mapStateToProps,\n    {\n        getCities: uploadCitiesThunk,\n        updText: citiesActions.updText,\n        addCity: addCityThunk,\n        uploadCities: uploadCitiesThunk,\n        setCity: citiesActions.setCity,\n        deleteCity: deleteCityThunk\n    })(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {citiesInstructions} from \"./Reducers/citiesReducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\nlet allReducers = combineReducers({\r\n    citiesReducer: citiesInstructions\r\n})\r\n\r\ntype StoreType = typeof allReducers\r\nexport type AppStateType = ReturnType<StoreType>\r\n\r\ntype PropertiesTypes<T> = T extends {[key: string]: infer U} ? U : never\r\nexport type InferActionsTypes<T extends {[key: string]: (...args: any[]) => any}> = ReturnType<PropertiesTypes<T>>\r\n\r\nexport const store = createStore(allReducers, applyMiddleware(thunk))\r\n//@ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {AppWrapper} from './App';\nimport {Provider} from 'react-redux'\nimport * as serviceWorker from './serviceWorker';\nimport {store} from \"./Redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppWrapper />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}